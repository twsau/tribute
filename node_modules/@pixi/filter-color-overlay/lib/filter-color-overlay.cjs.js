/*!
 * @pixi/filter-color-overlay - v3.1.0
 * Compiled Wed, 11 Mar 2020 20:38:18 UTC
 *
 * @pixi/filter-color-overlay is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');
var utils = require('@pixi/utils');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec3 color;\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec3 colorOverlay = color * currentColor.a;\n    gl_FragColor = vec4(colorOverlay.r, colorOverlay.g, colorOverlay.b, currentColor.a);\n}\n";

/**
 * Replace all colors within a source graphic with a single color.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-overlay.png)
 *
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 * @see {@link https://www.npmjs.com/package/@pixi/filter-color-replace|@pixi/filter-color-replace}
 * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}
 * @param {number|Array<number>} [color=0x000000] The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]
 *
 * @example
 *  // replaces red with blue
 *  someSprite.filters = [new ColorOverlayFilter(
 *   [1, 0, 0],
 *   [0, 0, 1],
 *   0.001
 *   )];
 *
 */
var ColorOverlayFilter = /*@__PURE__*/(function (Filter) {
    function ColorOverlayFilter(color) {
        if ( color === void 0 ) color = 0x000000;

        Filter.call(this, vertex, fragment);
        this.uniforms.color = new Float32Array(3);
        this.color = color;
    }

    if ( Filter ) ColorOverlayFilter.__proto__ = Filter;
    ColorOverlayFilter.prototype = Object.create( Filter && Filter.prototype );
    ColorOverlayFilter.prototype.constructor = ColorOverlayFilter;

    var prototypeAccessors = { color: { configurable: true } };

    /**
     * The resulting color, as a 3 component RGB e.g. [1.0, 0.5, 1.0]
     * @member {number|Array<number>}
     * @default 0x000000
     */
    prototypeAccessors.color.set = function (value) {
        var arr = this.uniforms.color;
        if (typeof value === 'number') {
            utils.hex2rgb(value, arr);
            this._color = value;
        }
        else {
            arr[0] = value[0];
            arr[1] = value[1];
            arr[2] = value[2];
            this._color = utils.rgb2hex(arr);
        }
    };
    prototypeAccessors.color.get = function () {
        return this._color;
    };

    Object.defineProperties( ColorOverlayFilter.prototype, prototypeAccessors );

    return ColorOverlayFilter;
}(core.Filter));

exports.ColorOverlayFilter = ColorOverlayFilter;
//# sourceMappingURL=filter-color-overlay.cjs.js.map
